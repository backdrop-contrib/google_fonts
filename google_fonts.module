<?php

/**
 * @file
 * This module enables Google Fonts on your website.
 *
 * This module enables you to load fonts from the Google Fonts API
 * within your website. After selecting which fonts you want to use
 * they will become available as working font-families in your CSS.
 */

/**
 * Implements hook_menu().
 */
function google_fonts_menu() {

  $items = array();

  $items['admin/config/system/google_fonts'] = array(
    'title' => 'Google Fonts',
    'description' => 'Select the Google Fonts to use.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('google_fonts_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'google_fonts.admin.inc',
  );

  $items['admin/config/system/google_fonts/update'] = array(
    'title' => 'Update Google Fonts list',
    'page callback' => '_google_fonts_update_font_list',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function google_fonts_init() {

  // We don't need to load the fonts twice as the admin interface
  // loads ALL fonts by default already
  if ($_GET['q'] == 'admin/config/system/google_fonts') {
    return;
  }

  $fonts_to_load = array();
  $enabled_fonts = config_get('google_fonts.settings', 'google_fonts_enabled_fonts');
  _google_fonts_add_custom_css();

  if (isset($enabled_fonts)) {
    foreach ($enabled_fonts as $font) {
      $variants = isset($font['variants']) ? $font['variants'] : NULL;
      $subsets = isset($font['subsets']) ? $font['subsets'] : NULL;
      $fonts_to_load[] = _google_fonts_family_pathname($font['family'], $variants, $subsets);
    }
  }
  if (!empty($fonts_to_load)) {
    _google_fonts_load_css($fonts_to_load, 1);
  }
}

function _google_fonts_add_custom_css() {

  // Now add it to the list of CSS files to be loaded
  backdrop_add_css(
    _google_fonts_cache(config_get('google_fonts.settings', "google_fonts_css_contents")),
    array('type' => 'file', 'every_page' => TRUE, 'group' => CSS_THEME)
  );
}

/**
 * Add the CSS include to the HEAD of the page
 */
function _google_fonts_load_css($fonts_to_load, $chunksize = 15) {

  $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https' : 'http';

  $chunks = array_chunk($fonts_to_load, $chunksize);
  foreach ($chunks as $chunk) {
    backdrop_add_css($protocol . '://fonts.googleapis.com/css?family=' . implode('|', $chunk), array(
      'type' => 'external',
      'weight' => CSS_SYSTEM
    ));
  }
}

/**
 * Provides all needed details about Google fonts.
 * Thanks at @sreynen to provide this array in his @font-your-face module
 */
function _google_fonts_available_fonts($reset = FALSE) {
  $fontslist = config_get('google_fonts.settings', 'google_fonts_webfonts');

  //new for Backdrop
  //convert each entry into a stdClass object
  //and build $fontsbuffer as an array of objects

  $fontsbuffer = array();

  foreach ($fontslist as $f) {
    $font = new stdClass;
    $font->family = $f['family'];
    $font->subsets = $f['subsets'];
    $font->variants = $f['variants'];
    $font->kind = $f['kind'];
    $font->category = $f['category'];
    $font->version = $f['version'];
    $font->lastModified = $f['lastModified'];
    $font->files = $f['files'];
    $fontsbuffer[] = $font;
  }

  if (empty($fontsbuffer) || $reset) {
    // Return the JSON object with all available fonts.
    // This requires an API key for the Google webfonts service.

    // This is only used when selecting fonts in the
    // admin interface. After that, the results are cached in Backdrop.
    // Go to https://developers.google.com/fonts/docs/developer_api
    // to obtain your own API key.

    // The 'out-of-the box' setting is my (Graham-72) API key.
    // $webfonts_api_key = 'AIzaSyDqIX-7e02ozn6JB5ADu0ZX5eTfrN2n3io';
    // Get current API key from config.
    $webfonts_api_key = config_get('google_fonts.settings', 'google_fonts_api_key');
    $webfonts_uri = "https://www.googleapis.com/webfonts/v1/webfonts?key=$webfonts_api_key";

    $result = backdrop_http_request($webfonts_uri);
    if ($result->code != 200) {
      backdrop_set_message(t('The list of Google Fonts could not be fetched.
      Check that you have set a valid API key and that your server can connect the Google Servers 
      (https://www.googleapis.com). Error: %error', array('%error' => $result->error)), 'error');
    }
    elseif (isset($result->data)) {

      $fontsbuffer = json_decode($result->data);
      config_set('google_fonts.settings', 'google_fonts_webfonts', $fontsbuffer->items);
    }
  }

  return $fontsbuffer;
}

/**
 * Trigger to reset the locally stored variable and fetch a new font list
 */
function _google_fonts_update_font_list() {
  $fonts = _google_fonts_available_fonts(TRUE);
  if (!empty($fonts)) {
    backdrop_set_message(t('A new list of fonts has been fetched.'));
  }
  backdrop_goto('admin/config/system/google_fonts');
}

/**
 * Format the font name as saved in the database (underscores instead of spaces)
 */
function _google_fonts_system_fontname($string) {

  return str_replace(' ', '_', $string);
}

function _google_fonts_family_pathname($family, $variants = NULL, $subsets = NULL) {

  $string = str_replace(' ', '+', $family);

  if ($variants) {
    if (is_array($variants) && sizeof($variants) == 1 && isset($variants['regular'])) {
      unset($variants['regular']);
    }
    if ($variants) {
      $string .= ':' . implode(',', $variants);
    }
  }

  // for latin, we don't need to declare a subset.
  if (!empty($subsets)) {
    $string .= '&subset=';
    foreach ((array) $subsets as $subset) {
      if (!empty($subset)) {
        $string .= $subset . ',';
      }
    }
    $string = substr($string, 0, -1);
  }

  return $string;
}

function _google_fonts_family_array_key_encode($string) {
  return str_replace(' ', '_', $string);
}

function _google_fonts_family_array_key_decode($string) {
  $string = str_replace('__', ':', $string);
  $string = str_replace('_', ' ', $string);
  return $string;
}

/**
 * Return the path of this font
 * If it is a child font of a larger family, scan the array to determine its path
 */
function _google_fonts_get_font_info($font, $full_font = '') {
  $available_fonts = _google_fonts_available_fonts();
  if (empty($full_font)) {
    $full_font = $font;
  }
  if (isset($available_fonts[$font]['fonts'])) {
    if (isset($available_fonts[$font]['fonts'][$full_font])) {
      return $available_fonts[$font]['fonts'][$full_font];
    }
    else {
      return $available_fonts[$font];
    }
  }
  else {
    // Try the string without the last word to determine the parent
    $font = substr($font, 0, strrpos($font, " "));
    return _google_fonts_get_font_info($font, $full_font);
  }
}

/**
 * Filter function to filter out the disabled Google Fonts.
 */
function _google_fonts_filter_enabled_fonts($value) {
  if ($value == '0') {
    return FALSE;
  }
  return TRUE;
}

/**
 * Create the CSS file and store it locally.
 */
function _google_fonts_cache($file_contents, $reset = FALSE) {
  $file_destination = 'public://google_fonts.css';
  if ((!file_exists($file_destination) || $reset) && !empty($file_contents)) {
    // Append a comment in the CSS code
    $file_contents = '/* CSS code for the Google Fonts module */' . PHP_EOL . $file_contents;

    // Save as a file (unmanaged) and return it
    $file = file_unmanaged_save_data($file_contents, $file_destination, FILE_EXISTS_REPLACE);

    // Set standard file permissions for webserver-generated files.
    backdrop_chmod($file);

    return TRUE;
  }
  else {
    return $file_destination;
  }
}

/**
 * Deletes the CSS file
 */
function _google_fonts_delete_cache() {

  $file_destination = 'public://google_fonts.css';
  variable_del('google_fonts_css_contents');

  if (file_exists($file_destination)) {
    if (backdrop_unlink($file_destination)) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }

}

/**
 * Implements hook_config_info().
 */
function google_fonts_config_info() {
  $prefixes['google_fonts.settings'] = array(
    'label' => t('Google Fonts settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}
